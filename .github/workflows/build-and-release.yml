name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  build:
    runs-on: windows-latest  # ‰ΩøÁî®ÊúÄÊñ∞ÁöÑWindowsÁéØÂ¢É (ÂΩìÂâç: Windows Server 2022, 2025Âπ¥9ÊúàÂêé: Windows Server 2025)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Set up environment for UTF-8
      run: |
        # ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè‰ª•ÊîØÊåÅUTF-8ÁºñÁ†Å
        echo "PYTHONIOENCODING=utf-8" >> $env:GITHUB_ENV
        echo "PYTHONUTF8=1" >> $env:GITHUB_ENV
        # ËÆæÁΩÆÊéßÂà∂Âè∞‰ª£Á†ÅÈ°µ‰∏∫UTF-8
        chcp 65001
      shell: powershell
        
    - name: Build executable
      run: |
        python ci_build_exe.py
      env:
        PYTHONIOENCODING: utf-8
        PYTHONUTF8: 1
        
    - name: List dist contents (debug)
      run: |
        Write-Host "Contents of dist directory:"
        if (Test-Path "dist") {
          Get-ChildItem -Path "dist" -Recurse | Format-Table -AutoSize
        } else {
          Write-Host "dist directory not found"
        }
      shell: powershell
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: scanman-windows-build
        path: |
          dist/ScanReportGenerator.exe
          dist/static/
          dist/README.md
        retention-days: 30
        
    - name: Create release archive
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      shell: pwsh
      run: |
        Write-Host "Creating release package..."
        New-Item -ItemType Directory -Name "release-package" -Force | Out-Null
        
        Write-Host "Copying executable..."
        Copy-Item -Path "dist/ScanReportGenerator.exe" -Destination "release-package/" -Force
        
        Write-Host "Copying static folder..."
        if (Test-Path "dist/static") {
          Copy-Item -Path "dist/static" -Destination "release-package/static" -Recurse -Force
        } else {
          Write-Host "Warning: static folder not found"
        }
        
        Write-Host "Copying README..."
        if (Test-Path "dist/README.md") {
          Copy-Item -Path "dist/README.md" -Destination "release-package/" -Force
        } else {
          Write-Host "README.md not found, skipping"
        }
        
        Write-Host "Creating zip archive..."
        Compress-Archive -Path "release-package/*" -DestinationPath "scanman-windows-latest.zip" -Force
        
        Write-Host "Release package created successfully"
        
    - name: Get current date
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      id: date
      run: echo "date=$(Get-Date -Format 'yyyy-MM-dd-HHmm')" >> $env:GITHUB_OUTPUT
      shell: powershell
      
    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.date.outputs.date }}
        release_name: Vulnerability Scan Report Generator v${{ steps.date.outputs.date }}
        body: |
          ## üöÄ Ëá™Âä®ÊûÑÂª∫ÂèëÂ∏É
          
          **ÊûÑÂª∫Êó∂Èó¥**: ${{ steps.date.outputs.date }}
          **Êèê‰∫§**: ${{ github.sha }}
          **ÂàÜÊîØ**: ${{ github.ref_name }}
          
           ### üì¶ ÂåÖÂê´ÂÜÖÂÆπ
           - `ScanReportGenerator.exe` - ‰∏ªÁ®ãÂ∫èÂèØÊâßË°åÊñá‰ª∂
           - `static/` - WordÊ®°ÊùøÊñá‰ª∂Â§πÔºàÂøÖÈúÄÔºâ
           - `README.md` - ‰ΩøÁî®ËØ¥Êòé
          
          ### üîß ‰ΩøÁî®ÊñπÊ≥ï
           1. ‰∏ãËΩΩÂπ∂Ëß£Âéã `scanman-windows-latest.zip`
           2. ÂèåÂáªËøêË°å `ScanReportGenerator.exe`
           3. ÊåâÁÖßGUIÁïåÈù¢ÊèêÁ§∫Êìç‰Ωú
          
          ---
          *Ê≠§ÁâàÊú¨Áî± GitHub Actions Ëá™Âä®ÊûÑÂª∫*
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./scanman-windows-latest.zip
        asset_name: scanman-windows-latest.zip
        asset_content_type: application/zip

  # ÂèØÈÄâÔºöÂú®PRÊó∂ËøõË°åÊûÑÂª∫ÊµãËØïÔºà‰∏çÂèëÂ∏ÉÔºâ
  test-build:
    runs-on: windows-latest  # ÂΩìÂâç: Windows Server 2022, 2025Âπ¥9ÊúàÂêé: Windows Server 2025
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Set up environment for UTF-8
      run: |
        # ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè‰ª•ÊîØÊåÅUTF-8ÁºñÁ†Å
        echo "PYTHONIOENCODING=utf-8" >> $env:GITHUB_ENV
        echo "PYTHONUTF8=1" >> $env:GITHUB_ENV
        # ËÆæÁΩÆÊéßÂà∂Âè∞‰ª£Á†ÅÈ°µ‰∏∫UTF-8
        chcp 65001
      shell: powershell
        
    - name: Test build
      run: |
        python ci_build_exe.py
      env:
        PYTHONIOENCODING: utf-8
        PYTHONUTF8: 1
        
    - name: Verify build
      shell: pwsh
      run: |
        if (Test-Path "dist/ScanReportGenerator.exe") {
          Write-Host "Build successful - executable created"
          $size = (Get-Item "dist/ScanReportGenerator.exe").Length / 1MB
          Write-Host "Executable size: $([math]::Round($size, 2)) MB"
        } else {
          Write-Host "Build failed - executable not found"
          exit 1
        }
        
        if (Test-Path "dist/static") {
          $templateCount = (Get-ChildItem "dist/static/*.docx").Count
          Write-Host "Template files found: $templateCount"
        } else {
          Write-Host "Warning: static folder not found"
        }
